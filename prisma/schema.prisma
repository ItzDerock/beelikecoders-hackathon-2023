// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    password      String    @db.Text

    profilePicture String
    bio            String? @db.Text

    // streaks
    streakLength Int?      @default(0)
    lastStreak   DateTime?

    // longest streaks
    longestStreakLength Int?      @default(0)
    longestStreak       DateTime?

    accounts        Account[]
    sessions        Session[]
    eventId         String?
    hostedEvents    Event[]   @relation("HostedEvents")
    attendingEvents Event?    @relation(name: "AttendingEvents", fields: [eventId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Type {
    VIRTUAL
    IN_PERSON
}

model Event {
    id          String   @id @default(cuid())
    name        String
    description String?  @db.Text
    images      String[] @default([])
    tags        String[] @default([])

    type            Type
    additionalInfo  String?               @db.Text
    locationLongLat Unsupported("Point")?
    locationName    String?

    date      DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    coordinator   User   @relation(name: "HostedEvents", fields: [coordinatorId], references: [id], onDelete: Cascade)
    coordinatorId String

    attendees User[] @relation(name: "AttendingEvents")
}
